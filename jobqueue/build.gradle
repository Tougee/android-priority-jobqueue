import java.util.regex.Pattern

apply plugin: 'com.android.library'

Properties releaseConfig = new Properties()
File releaseFile = new File("${projectDir}/releaseConfig.properties")
if (releaseFile.exists()) {
    releaseConfig.load(new FileInputStream(releaseFile))
}
// for jitpack
group='com.github.yigit'
ext.releaseConfig = releaseConfig

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'jacoco'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

configurations {
    archives {
        extendsFrom configurations.default
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile "org.robolectric:robolectric:3.3"
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.easytesting:fest-util:1.2.5'
    testCompile 'org.easytesting:fest-reflect:1.4.1'
    testCompile 'org.mockito:mockito-core:2.7.13'

    compile 'com.squareup.okio:okio:1.14.0'

    // use an old version since we only need a few util classes that were already there for a long
    // time. If app depends on a newer one, gradle will pick it for us.
    //noinspection GradleDependency
    // remove when gms moves to individual libraries
    compile 'com.android.support:support-v4:25.2.0'
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            testCoverageEnabled = false
        }
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            jvmArgs '-Xmx2000m', '-XX:+HeapDumpOnOutOfMemoryError', "-XX:HeapDumpPath=${System.env.CIRCLE_ARTIFACTS == null ? "." : System.env.CIRCLE_ARTIFACTS}/oom.hprof"
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }
}

//READ VERSION NAME
def manifestFile = file("${projectDir}/src/main/AndroidManifest.xml")
def pattern = Pattern.compile("versionName=\"([\\d\\.\\w\\-]+)\"")
def manifestText = manifestFile.getText()
def matcher = pattern.matcher(manifestText)
matcher.find()
def manifestVersionName = matcher.group(1)
println "version name:${manifestVersionName}"

task testLint(type : Exec) {
    workingDir project.projectDir
    // SET ANDROID_LINT_JARS ENV VARIABLE
    commandLine 'lint', '.', '--sources', 'src/test/java', '--disable', 'InlinedApi,AllowBackup,MissingApplicationIcon,LintError,NOTIFY_ON_OBJECT'
}

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       'android/**/*.*',
                       'com/google/**']
    )

    sourceDirectories = files(android.sourceSets.main.getJava().getSrcDirs())
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])

    reports {
        xml.enabled = true
        html.enabled = true
    }

    dependsOn "createDebugCoverageReport"
}